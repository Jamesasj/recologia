def grafo_debruijn(reads):
    graph = {}
    for sequencia in reads:
        a, b = sequencia[:-1], sequencia[1:]
        if a not in graph:
            graph[a] = set()
        if b not in graph:
            graph[b] = set()
        graph[a].add(b)
    return graph

def complemento_reverso(s):
    complementos = {'A':'T', 'T':'A', 'G':'C', 'C':'G'}
    return ''.join([complementos[c] for c in reversed(s)])

'''
f = open("/home/augusto/downloads_chromium_ubuntu/rosalind_dbru.txt",'r')
reads = []
for line in f:
    reads.append(line.strip())
'''

reads=['TGAT','CATG','TCAT','ATGC','CATC','CATC']
# print reads

reads = reads + map(complemento_reverso, reads)
print reads

grafo = grafo_debruijn(reads + map(complemento_reverso, reads))
print grafo

for node in grafo:
    if len(graph[node]) > 0:
        for neighbour in graph[node]:
            print "({a}, {b})".format(a = node, b = neighbour)

